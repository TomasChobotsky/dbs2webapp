@page "/admin/create-user"
@attribute [Authorize(Roles = "Admin")]

@using Microsoft.AspNetCore.Authorization
@using dbs2webapp.Application.DTOs.Admin
@inject HttpClient Http
@inject NavigationManager Nav

<h3>Create New User</h3>

<EditForm Model="formData" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Email</label>
        <InputText @bind-Value="formData.Email" class="form-control" />
        <ValidationMessage For="@(() => formData.Email)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Role</label>
        <InputSelect @bind-Value="formData.Role" class="form-control">
            <option value="">-- Select a role --</option>
            @foreach (var role in roles)
            {
                <option value="@role">@role</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => formData.Role)" />
    </div>

    <div class="d-flex gap-2">
        <button class="btn btn-primary" type="submit" disabled="@isSubmitting">
            @if (isSubmitting)
            {
                <span class="spinner-border spinner-border-sm me-2"></span>
            }
            else
            {
                <span>Create</span>
            }
        </button>
        <button class="btn btn-secondary" type="button" @onclick="@(() => Nav.NavigateTo("/admin/users"))">
            Cancel
        </button>
    </div>

    @if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger mt-3">@error</div>
    }
</EditForm>

@code {
    private const string DefaultPassword = "Asdf1234*";

    private AdminCreateUserDto formData = new()
        {
            Password = DefaultPassword
        };

    private readonly string[] roles = new[] { "Student", "Teacher", "Admin" };
    private bool isSubmitting = false;
    private string? error;

    private async Task HandleSubmit()
    {
        isSubmitting = true;
        error = null;

        try
        {
            var response = await Http.PostAsJsonAsync("/api/admin/create-user", formData);

            if (response.IsSuccessStatusCode)
            {
                Nav.NavigateTo("/admin/users", forceLoad: true); // legacy-style redirect on success
                return;
            }

            var msg = await response.Content.ReadAsStringAsync();
            error = $"Failed to create user: {msg}";
        }
        catch (Exception ex)
        {
            error = $"Unexpected error: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }
}