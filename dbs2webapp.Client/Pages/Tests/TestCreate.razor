@page "/tests/create/{ChapterId:int}"
@attribute [Authorize(Roles = "Teacher,Admin")]

@inject HttpClient Http
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Authorization
@using dbs2webapp.Application.DTOs.Tests

<h3>Create Test</h3>

<EditForm Model="@testModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Test Title</label>
        <InputText @bind-Value="testModel.Title" class="form-control" />
    </div>

    @for (int qIndex = 0; qIndex < testModel.Questions.Count; qIndex++)
    {
        var question = testModel.Questions[qIndex];
        // capture the current qIndex into qi
        var qi = qIndex;

        <div class="card mb-4" @key="question">
            <div class="card-body">

                <!-- remove question -->
                <button type="button"
                        class="mb-3 btn btn-sm btn-danger"
                        @onclick="() => RemoveQuestion(qi)">
                    Remove Question
                </button>

                <!-- question text -->
                <InputText @bind-Value="testModel.Questions[qi].Content"
                           class="form-control mb-2" />

                <strong>Options:</strong>
                <InputRadioGroup @bind-Value="question.CorrectOptionIndex">

                    @for (int oIndex = 0; oIndex < question.Options.Count; oIndex++)
                    {
                        // likewise capture oIndex
                        var oi = oIndex;
                        var option = question.Options[oi];

                        <div class="input-group mb-2" @key="option">
                            <InputText @bind-Value="option.Text"
                                       class="form-control"
                                       placeholder="Option text" />

                            <div class="input-group-text">
                                <InputRadio Value="@oi" />
                                <label class="ms-1">Correct</label>
                            </div>

                            <!-- remove option -->
                            <button type="button"
                                    class="btn btn-sm btn-outline-danger"
                                    @onclick="() => RemoveOption(qi, oi)">
                                Remove
                            </button>
                        </div>
                    }

                </InputRadioGroup>

                <!-- add option -->
                <button type="button"
                        class="btn btn-sm btn-outline-primary"
                        @onclick="() => AddOption(qi)">
                    + Add Option
                </button>

            </div>
        </div>
    }




    <button type="button" class="btn btn-secondary mb-3" @onclick="AddQuestion">+ Add Question</button>
    <br />
    <button type="submit" class="btn btn-primary">Create Test</button>
</EditForm>

@code {
    [Parameter] public int ChapterId { get; set; }

    private CreateTestDto testModel = new();

    protected override void OnInitialized()
    {
        testModel.ChapterId = ChapterId;
        AddQuestion(); // start with 1 question
    }

    private void AddQuestion()
    {
        var q = new QuestionDto
        {
            Content = string.Empty,
            CorrectOptionIndex = 0,
            Options = new List<OptionDto>
            {
                new() { Text = "" },
                new() { Text = "" },
                new() { Text = "" },
                new() { Text = "" }
            }
        };
        testModel.Questions.Add(q);
    }

    private void RemoveQuestion(int index)
    {
        if (index >= 0 && index < testModel.Questions.Count)
            testModel.Questions.RemoveAt(index);
    }

    private void AddOption(int questionIndex)
    {
        testModel.Questions[questionIndex].Options.Add(new OptionDto { Text = "" });
    }

    private void RemoveOption(int questionIndex, int optionIndex)
    {
        var options = testModel.Questions[questionIndex].Options;
        if (optionIndex >= 0 && optionIndex < options.Count)
        {
            options.RemoveAt(optionIndex);
            // Reset correct index if needed
            if (testModel.Questions[questionIndex].CorrectOptionIndex >= options.Count)
                testModel.Questions[questionIndex].CorrectOptionIndex = 0;
        }
    }

    private async Task HandleValidSubmit()
    {
        var response = await Http.PostAsJsonAsync($"api/tests/{ChapterId}", testModel);
        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/teacher-panel");
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.Error.WriteLine($"Failed to create test: {error}");
        }
    }
}
