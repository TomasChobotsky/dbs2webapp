@page "/tests/create/{ChapterId:int}"
@attribute [Authorize(Roles = "Teacher,Admin")]

@using Microsoft.AspNetCore.Authorization
@using dbs2webapp.Application.DTOs.Tests
@inject HttpClient          Http
@inject NavigationManager   Nav

<h3>Create Test</h3>

<EditForm Model="@testModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Test title</label>
        <InputText class="form-control" @bind-Value="testModel.Title"/>
    </div>

    @for (var qIndex = 0; qIndex < testModel.Questions.Count; qIndex++)
    {
        var qi = qIndex;                            // capture loop variable once
        var q  = testModel.Questions[qi];

        <div class="card mb-4" @key="q">
            <div class="card-body">

                <button type="button"
                class="btn btn-sm btn-danger mb-3"
                @onclick="() => RemoveQuestion(qi)">
                    Remove question
                </button>

                <InputText class="form-control mb-2"
                placeholder="Question text"
                @bind-Value="q.Content" />

                <strong>Options</strong>

                <!-- 1️⃣  Every question gets its own radio group.                -->
                <!-- 2️⃣  Tell the group we’re binding an INT with TValue="int".  -->
                <!-- 3️⃣  Give each group an explicit Name to isolate them.       -->
                <InputRadioGroup TValue="int"
                Name="@($"correct_q{qi}")"
                class="d-block"
                @bind-Value="q.CorrectOptionIndex">

                    @for (var oIndex = 0; oIndex < q.Options.Count; oIndex++)
                    {
                        var oi = oIndex;            // capture once
                        var opt = q.Options[oi];

                        <div class="input-group mb-2" @key="opt">

                            <InputText class="form-control"
                            placeholder="Option text"
                            @bind-Value="opt.Text" />

                            <span class="input-group-text">
                                <!-- 4️⃣  Each radio gets the option index as its Value -->
                                <InputRadio TValue="int" Value="oi" />
                                <label class="ms-1 mb-0">Correct</label>
                            </span>

                            <button type="button"
                            class="btn btn-sm btn-outline-danger"
                            @onclick="() => RemoveOption(qi, oi)">
                                Remove
                            </button>
                        </div>
                    }
                </InputRadioGroup>

                <button type="button"
                class="btn btn-sm btn-outline-primary"
                @onclick="() => AddOption(qi)">
                    + Add option
                </button>
            </div>
        </div>
    }

    <button type="button" class="btn btn-secondary mb-3" @onclick="AddQuestion">
        + Add question
    </button>

    <br/>
    <button type="submit" class="btn btn-primary">Create test</button>
</EditForm>

@code {
    [Parameter] public int ChapterId { get; set; }

    private readonly CreateTestDto testModel = new();

    protected override void OnInitialized()
    {
        testModel.ChapterId = ChapterId;
        AddQuestion();                              // start with one question
    }

    // ---------- Question helpers ------------------------------------------------
    private void AddQuestion()
    {
        testModel.Questions.Add(new QuestionDto
        {
            Content           = string.Empty,
            CorrectOptionIndex = -1,                // -1 = “no answer yet”
            Options = Enumerable.Range(0, 4)
                                 .Select(_ => new OptionDto())
                                 .ToList()
        });
    }

    private void RemoveQuestion(int idx)
        => testModel.Questions.RemoveAt(idx);

    // ---------- Option helpers ---------------------------------------------------
    private void AddOption(int qIdx)
        => testModel.Questions[qIdx].Options.Add(new OptionDto());

    private void RemoveOption(int qIdx, int oIdx)
    {
        var q = testModel.Questions[qIdx];
        q.Options.RemoveAt(oIdx);

        // keep CorrectOptionIndex valid
        if (q.CorrectOptionIndex == oIdx)           // removed the correct one
            q.CorrectOptionIndex = -1;              // “none chosen”
        else if (q.CorrectOptionIndex > oIdx)       // removed an earlier option
            q.CorrectOptionIndex--;                 // shift left
    }

    // ---------- Submit -----------------------------------------------------------
    private async Task HandleValidSubmit()
    {
        PrepareForSave();

        var resp = await Http.PostAsJsonAsync($"api/tests/{ChapterId}", testModel);
        if (resp.IsSuccessStatusCode)
            Nav.NavigateTo("/teacher-panel");
        else
            Console.Error.WriteLine(await resp.Content.ReadAsStringAsync());
    }

    private void PrepareForSave()          // call before POST/PUT
    {
        foreach (var q in testModel.Questions)
        {
            for (int i = 0; i < q.Options.Count; i++)
                q.Options[i].IsCorrect = (i == q.CorrectOptionIndex);
        }
    }
}