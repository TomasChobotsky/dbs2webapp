@page "/tests/edit/{Id:int}"
@using Application.DTOs
@using Application.DTOs.Tests
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Edit Test</h3>

@if (isLoading)
{
    <p>Loading test...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else
{
    <EditForm Model="@testModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Test Title</label>
            <InputText @bind-Value="testModel.Title" class="form-control" />
        </div>

        @foreach (var question in testModel.Questions)
        {
            var qIndex = testModel.Questions.IndexOf(question);
            <div class="card mb-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <label class="form-label">Question</label>
                        <button class="btn btn-sm btn-danger" @onclick="() => RemoveQuestion(qIndex)">Remove Question</button>
                    </div>
                    <InputText @bind-Value="question.Content" class="form-control mb-2" />

                    <strong>Options:</strong>
                    <InputRadioGroup @bind-Value="question.CorrectOptionIndex" class="d-block">
                        @for (int i = 0; i < question.Options.Count; i++)
                        {
                            <div class="input-group mb-2">
                                <InputText @bind-Value="question.Options[i].Text" class="form-control" placeholder="Option text" />

                                <div class="input-group-text">
                                    <InputRadio Value="@i" /> <label class="ms-1">Correct</label>
                                </div>

                                <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveOption(qIndex, i)">Remove</button>
                            </div>
                        }
                    </InputRadioGroup>


                    <button class="btn btn-sm btn-outline-primary" @onclick="() => AddOption(qIndex)">+ Add Option</button>
                </div>
            </div>
        }

        <button class="btn btn-secondary mb-3" @onclick="AddQuestion">+ Add Question</button>
        <br />
        <button type="submit" class="btn btn-primary">Save Changes</button>
    </EditForm>
}

@code {
    [Parameter] public int Id { get; set; }

    private TestDto testModel = new();
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var fetched = await Http.GetFromJsonAsync<TestDto>($"api/tests/{Id}");
            if (fetched == null)
                throw new Exception("Test not found.");

            testModel = fetched;
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load test: {ex.Message}";
        }
        isLoading = false;
    }

    private async Task HandleValidSubmit()
    {
        var response = await Http.PutAsJsonAsync($"api/tests/{Id}", testModel);
        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/teacher-panel");
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.Error.WriteLine($"Error saving test: {error}");
        }
    }

    private void AddQuestion()
    {
        testModel.Questions.Add(new QuestionDto
        {
            Content = "",
            CorrectOptionIndex = 0,
            Options = new List<OptionDto>
            {
                new() { Text = "" },
                new() { Text = "" },
                new() { Text = "" },
                new() { Text = "" }
            }
        });
    }

    private void RemoveQuestion(int index)
    {
        if (index >= 0 && index < testModel.Questions.Count)
            testModel.Questions.RemoveAt(index);
    }

    private void AddOption(int questionIndex)
    {
        testModel.Questions[questionIndex].Options.Add(new OptionDto { Text = "" });
    }

    private void RemoveOption(int questionIndex, int optionIndex)
    {
        var options = testModel.Questions[questionIndex].Options;
        if (optionIndex >= 0 && optionIndex < options.Count)
        {
            options.RemoveAt(optionIndex);

            if (testModel.Questions[questionIndex].CorrectOptionIndex >= options.Count)
                testModel.Questions[questionIndex].CorrectOptionIndex = 0;
        }
    }
}
