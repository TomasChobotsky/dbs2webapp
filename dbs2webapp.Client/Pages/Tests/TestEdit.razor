@page "/tests/edit/{TestId:int}"
@attribute [Authorize(Roles = "Teacher,Admin")]

@inject HttpClient Http
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Authorization
@using dbs2webapp.Application.DTOs.Tests

<h3>Edit Test</h3>

@if (isLoading)
{
    <div class="text-center my-5">Loading…</div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else
{
    <EditForm Model="testModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Test Title</label>
            <InputText @bind-Value="testModel.Title" class="form-control" />
        </div>

        @for (int qIndex = 0; qIndex < testModel.Questions.Count; qIndex++)
        {
            // capture for closures:
            var qi = qIndex;
            var question = testModel.Questions[qi];

            <div class="card mb-4" @key="question">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <label class="form-label">Question</label>
                        <button type="button"
                                class="btn btn-sm btn-danger"
                                @onclick="() => RemoveQuestion(qi)">
                            Remove Question
                        </button>
                    </div>

                    <InputText @bind-Value="testModel.Questions[qi].Content"
                               class="form-control mb-2" />

                    <strong>Options:</strong>
                    <InputRadioGroup @bind-Value="question.CorrectOptionIndex">
                        @for (int oIndex = 0; oIndex < question.Options.Count; oIndex++)
                        {
                            var oi = oIndex;
                            var option = question.Options[oi];

                            <div class="input-group mb-2" @key="option">
                                <InputText @bind-Value="option.Text"
                                           class="form-control"
                                           placeholder="Option text" />

                                <div class="input-group-text">
                                    <InputRadio Value="@oi" />
                                    <label class="ms-1">Correct</label>
                                </div>

                                <button type="button"
                                        class="btn btn-sm btn-outline-danger"
                                        @onclick="() => RemoveOption(qi, oi)">
                                    Remove
                                </button>
                            </div>
                        }
                    </InputRadioGroup>

                    <button type="button"
                            class="btn btn-sm btn-outline-primary"
                            @onclick="() => AddOption(qi)">
                        + Add Option
                    </button>
                </div>
            </div>
        }

        <button type="button" class="btn btn-secondary mb-3" @onclick="AddQuestion">
            + Add Question
        </button>
        <br />
        <button type="submit" class="btn btn-primary">Save Changes</button>
    </EditForm>
}

@code {
    [Parameter] public int TestId { get; set; }

    private CreateTestDto testModel = new();
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load the existing test (including its questions & options)
            var dto = await Http.GetFromJsonAsync<CreateTestDto>($"api/tests/{TestId}");
            if (dto == null)
                throw new Exception("Test not found");

            testModel = dto;
        }
        catch (Exception ex)
        {
            errorMessage = $"Could not load test: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void AddQuestion()
    {
        testModel.Questions.Add(new QuestionDto
            {
                Content = "",
                CorrectOptionIndex = 0,
                Options = new List<OptionDto>
            {
                new() { Text = "" },
                new() { Text = "" },
                new() { Text = "" },
                new() { Text = "" }
            }
            });
    }

    private void RemoveQuestion(int questionIndex)
    {
        if (questionIndex >= 0 && questionIndex < testModel.Questions.Count)
            testModel.Questions.RemoveAt(questionIndex);
    }

    private void AddOption(int questionIndex)
    {
        var opts = testModel.Questions[questionIndex].Options;
        opts.Add(new OptionDto { Text = "" });
    }

    private void RemoveOption(int questionIndex, int optionIndex)
    {
        var opts = testModel.Questions[questionIndex].Options;
        if (optionIndex >= 0 && optionIndex < opts.Count)
        {
            opts.RemoveAt(optionIndex);
            // ensure CorrectOptionIndex stays valid
            if (testModel.Questions[questionIndex].CorrectOptionIndex >= opts.Count)
                testModel.Questions[questionIndex].CorrectOptionIndex = 0;
        }
    }

    private async Task HandleValidSubmit()
    {
        // PUT or PATCH to your update endpoint
        var response = await Http.PutAsJsonAsync($"api/tests/{TestId}", testModel);
        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/teacher-panel");
        }
        else
        {
            var err = await response.Content.ReadAsStringAsync();
            errorMessage = $"Save failed: {err}";
        }
    }
}
