@page "/tests/edit/{TestId:int}"
@attribute [Authorize(Roles = "Teacher,Admin")]

@using Microsoft.AspNetCore.Authorization
@using dbs2webapp.Application.DTOs.Tests
@inject HttpClient Http
@inject NavigationManager Nav

<h3>Edit Test</h3>

@if (isLoading)
{
    <div class="text-center my-5">Loading…</div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else
{
    <EditForm Model="testModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- ---------- Test title ------------------------------------------------ -->
        <div class="mb-3">
            <label class="form-label">Test Title</label>
            <InputText class="form-control"
            @bind-Value="testModel.Title" />
        </div>

        <!-- ---------- Questions -------------------------------------------------- -->
        @for (var qIndex = 0; qIndex < testModel.Questions.Count; qIndex++)
        {
            var qi = qIndex;                         // capture index for lambdas
            var q = testModel.Questions[qi];

            <div class="card mb-4" @key="q">
                <div class="card-body">

                    <div class="d-flex justify-content-between">
                        <label class="form-label">Question</label>
                        <button type="button"
                        class="btn btn-sm btn-danger"
                        @onclick="() => RemoveQuestion(qi)">
                            Remove Question
                        </button>
                    </div>

                    <InputText class="form-control mb-2"
                    placeholder="Question text"
                    @bind-Value="q.Content" />

                    <strong>Options</strong>

                    <!-- *** FIX:   separate group per question,
                    TValue="int", explicit Name      -->
                    <InputRadioGroup TValue="int"
                    Name="@($"correct_q{qi}")"
                    class="d-block"
                    @bind-Value="q.CorrectOptionIndex">

                        @for (var oIndex = 0; oIndex < q.Options.Count; oIndex++)
                        {
                            var oi = oIndex;
                            var opt = q.Options[oi];

                            <div class="input-group mb-2" @key="opt">

                                <InputText class="form-control"
                                placeholder="Option text"
                                @bind-Value="opt.Text" />

                                <span class="input-group-text">
                                    <!-- *** FIX: TValue & Value ---------------- -->
                                    <InputRadio TValue="int" Value="oi" />
                                    <label class="ms-1 mb-0">Correct</label>
                                </span>

                                <button type="button"
                                class="btn btn-sm btn-outline-danger"
                                @onclick="() => RemoveOption(qi, oi)">
                                    Remove
                                </button>
                            </div>
                        }
                    </InputRadioGroup>

                    <button type="button"
                    class="btn btn-sm btn-outline-primary"
                    @onclick="() => AddOption(qi)">
                        + Add Option
                    </button>
                </div>
            </div>
        }

        <button type="button"
        class="btn btn-secondary mb-3"
        @onclick="AddQuestion">
            + Add Question
        </button>

        <br />
        <button type="submit" class="btn btn-primary">Save Changes</button>
    </EditForm>
}

@code {
    [Parameter] public int TestId { get; set; }

    private CreateTestDto testModel = new();
    private bool isLoading = true;
    private string? errorMessage;

    // ----------------------------- Load existing test ---------------------------
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var dto = await Http.GetFromJsonAsync<CreateTestDto>($"api/tests/{TestId}")
                      ?? throw new Exception("Test not found");
            testModel = dto;
            FixIndexesFromFlags();
        }
        catch (Exception ex) { errorMessage = $"Could not load test: {ex.Message}"; }
        finally { isLoading = false; }
    }

    // ----------------------------- Question helpers -----------------------------
    private void AddQuestion()
        => testModel.Questions.Add(new QuestionDto
            {
                Content = "",
                CorrectOptionIndex = -1,       // -1 = none selected
                Options = Enumerable.Range(0, 4)
                                     .Select(_ => new OptionDto())
                                     .ToList()
            });

    private void RemoveQuestion(int idx) => testModel.Questions.RemoveAt(idx);

    // ----------------------------- Option helpers -------------------------------
    private void AddOption(int qIdx) => testModel.Questions[qIdx].Options.Add(new OptionDto());

    private void RemoveOption(int qIdx, int oIdx)
    {
        var q = testModel.Questions[qIdx];
        q.Options.RemoveAt(oIdx);

        if (q.CorrectOptionIndex == oIdx) q.CorrectOptionIndex = -1; // removed the answer
        else if (q.CorrectOptionIndex > oIdx) q.CorrectOptionIndex--;    // shift left
    }

    // ----------------------------- Submit ---------------------------------------
    private async Task HandleValidSubmit()
    {
        PrepareForSave();

        var resp = await Http.PutAsJsonAsync($"api/tests/{TestId}", testModel);
        if (resp.IsSuccessStatusCode) Nav.NavigateTo("/teacher-panel");
        else errorMessage = "Save failed: " + await resp.Content.ReadAsStringAsync();
    }

    private void PrepareForSave()          // call before POST/PUT
    {
        foreach (var q in testModel.Questions)
        {
            for (int i = 0; i < q.Options.Count; i++)
                q.Options[i].IsCorrect = (i == q.CorrectOptionIndex);
        }
    }
    private void FixIndexesFromFlags()
    {
        foreach (var q in testModel.Questions)
        {
            var idx = q.Options.FindIndex(o => o.IsCorrect);
            q.CorrectOptionIndex = idx;    // will be -1 if no true flag was found
        }
    }
}
