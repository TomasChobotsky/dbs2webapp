@page "/chapters/delete/{Id:int}"
@using Application.DTOs
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Delete Chapter</h3>

@if (isLoading)
{
    <p>Loading chapter...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else
{
    <div class="alert alert-warning">
        <strong>Are you sure you want to delete this chapter?</strong>
    </div>

    <dl class="row">
        <dt class="col-sm-3">Chapter Name</dt>
        <dd class="col-sm-9">@chapter.Name</dd>

        <dt class="col-sm-3">Description</dt>
        <dd class="col-sm-9">@chapter.Description</dd>

        <dt class="col-sm-3">Created</dt>
        <dd class="col-sm-9">@chapter.CreatedDate.ToString("yyyy-MM-dd")</dd>
    </dl>

    <div class="d-flex justify-content-between">
        <button class="btn btn-secondary" @onclick="GoBack">Cancel</button>
        <button class="btn btn-danger" @onclick="DeleteChapter">Delete</button>
    </div>
}

@code {
    [Parameter] public int Id { get; set; }

    private ChapterDto chapter = new();
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            chapter = await Http.GetFromJsonAsync<ChapterDto>($"api/chapters/{Id}")
                      ?? throw new Exception("Chapter not found.");
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load chapter: {ex.Message}";
        }

        isLoading = false;
    }

    private async Task DeleteChapter()
    {
        var response = await Http.DeleteAsync($"api/chapters/{Id}");
        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/teacher-panel");
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.Error.WriteLine($"Error deleting chapter: {error}");
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/teacher-panel");
    }
}
