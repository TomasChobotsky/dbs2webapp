@page "/courses"
@inject HttpClient Http
@using dbs2database.Application.DTOs

<h3 class="text-2xl font-semibold mb-4">Courses</h3>

@if (courses == null)
{
    <p><em>Loading...</em></p>
}
else if (!courses.Any())
{
    <p>No courses found.</p>
}
else
{
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        @foreach (var course in courses)
        {
            <div class="p-4 border rounded shadow bg-white">
                <h4 class="text-xl font-bold">@course.Name</h4>
                <p class="text-gray-600">@course.Description</p>

                <div class="mt-2 flex gap-2">
                    <a href="@($"/courses/{course.Id}")" class="btn btn-primary">View</a>
                    @if (IsTeacherOrAdmin)
                    {
                        <a href="@($"/courses/edit/{course.Id}")" class="btn btn-secondary">Edit</a>
                        <button class="btn btn-danger" @onclick="() => DeleteCourse(course.Id)">Delete</button>
                    }
                </div>
            </div>
        }
    </div>
}

@code {
    private List<CourseDto>? courses;
    private bool IsTeacherOrAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Optional: detect user role via auth service
            IsTeacherOrAdmin = true; // TEMP — swap with real role logic later

            courses = await Http.GetFromJsonAsync<List<CourseDto>>("api/courses");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine("Error fetching courses: " + ex.Message);
        }
    }

    private async Task DeleteCourse(int courseId)
    {
        var response = await Http.DeleteAsync($"api/courses/{courseId}");
        if (response.IsSuccessStatusCode)
        {
            courses = courses!.Where(c => c.Id != courseId).ToList();
        }
        else
        {
            Console.Error.WriteLine($"Failed to delete course {courseId}");
        }
    }
}
