// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dbs2webapp.Models;

#nullable disable

namespace dbs2webapp.Migrations
{
    [DbContext(typeof(Dbs2databaseContext))]
    [Migration("20250331115626_AddIdentity")]
    partial class AddIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("dbs2webapp.Models.AccountRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__AccountRole__3214EC0757F8FBB8");

                    b.ToTable("AccountRole", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Student"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Učitel"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Administrátor"
                        });
                });

            modelBuilder.Entity("dbs2webapp.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("char(60)")
                        .IsFixedLength();

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__AppUser__3214EC07C0C0ECF6");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "UQ__AppUser__A9D10534C2FFE62C")
                        .IsUnique();

                    b.ToTable("AppUser", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "student1@example.com",
                            Firstname = "Jan",
                            Password = "hashed_password1",
                            RoleId = 1,
                            Surname = "Novák"
                        },
                        new
                        {
                            Id = 2,
                            Email = "ucitel1@example.com",
                            Firstname = "Petr",
                            Password = "hashed_password2",
                            RoleId = 2,
                            Surname = "Dvořák"
                        },
                        new
                        {
                            Id = 3,
                            Email = "admin1@example.com",
                            Firstname = "Karel",
                            Password = "hashed_password3",
                            RoleId = 3,
                            Surname = "Svoboda"
                        });
                });

            modelBuilder.Entity("dbs2webapp.Models.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChapterId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__Assignme__3214EC072522C8E5");

                    b.HasIndex("ChapterId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Assignment", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChapterId = 1,
                            Description = "Vytvořte jednoduchou SQL tabulku.",
                            DueDate = new DateTime(2025, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 2,
                            Title = "Domácí úkol 1"
                        });
                });

            modelBuilder.Entity("dbs2webapp.Models.AssignmentSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Assignme__3214EC079993DCD9");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Assignment_submission", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignmentId = 1,
                            File = "users_script.sql",
                            Text = "Vytvořil jsem tabulku users.",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("dbs2webapp.Models.AssignmentUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Assignment_User");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Assignment_User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignmentId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("dbs2webapp.Models.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__Chapter__3214EC0715667D5C");

                    b.HasIndex("CourseId");

                    b.ToTable("Chapter", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Contents = "Tato kapitola se věnuje základům SQL.",
                            CourseId = 1,
                            Name = "Úvod do SQL"
                        },
                        new
                        {
                            Id = 2,
                            Contents = "Jak správně psát SELECT dotazy.",
                            CourseId = 1,
                            Name = "SELECT příkazy"
                        },
                        new
                        {
                            Id = 3,
                            Contents = "Začínáme s programováním v C#.",
                            CourseId = 2,
                            Name = "Úvod do C#"
                        });
                });

            modelBuilder.Entity("dbs2webapp.Models.ChapterContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChapterId")
                        .HasColumnType("int");

                    b.Property<string>("TextFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__Chapter___3214EC07967DB6BE");

                    b.HasIndex("ChapterId");

                    b.ToTable("Chapter_content", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChapterId = 1,
                            TextFile = "uvod_sql.pdf",
                            Type = "Text"
                        },
                        new
                        {
                            Id = 2,
                            ChapterId = 2,
                            TextFile = "select_prikazy.mp4",
                            Type = "Video"
                        },
                        new
                        {
                            Id = 3,
                            ChapterId = 3,
                            TextFile = "uvod_csharp.pdf",
                            Type = "Text"
                        });
                });

            modelBuilder.Entity("dbs2webapp.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("Course_categoryId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__Course__3214EC07ADE10529");

                    b.HasIndex("CourseCategoryId");

                    b.ToTable("Course", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseCategoryId = 2,
                            Name = "SQL pro začátečníky"
                        },
                        new
                        {
                            Id = 2,
                            CourseCategoryId = 1,
                            Name = "C# pokročilé techniky"
                        },
                        new
                        {
                            Id = 3,
                            CourseCategoryId = 3,
                            Name = "Základy kybernetické bezpečnosti"
                        });
                });

            modelBuilder.Entity("dbs2webapp.Models.CourseCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__Course_c__3214EC0711D06CA9");

                    b.ToTable("Course_category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Programování"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Databáze"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Kybernetická bezpečnost"
                        });
                });

            modelBuilder.Entity("dbs2webapp.Models.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__Option__3214EC0720FD934B");

                    b.HasIndex("QuestionId");

                    b.ToTable("Option", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsCorrect = true,
                            QuestionId = 1,
                            Text = "Structured Query Language"
                        },
                        new
                        {
                            Id = 2,
                            IsCorrect = false,
                            QuestionId = 1,
                            Text = "System Query List"
                        },
                        new
                        {
                            Id = 3,
                            IsCorrect = true,
                            QuestionId = 2,
                            Text = "SELECT * FROM tabulka;"
                        },
                        new
                        {
                            Id = 4,
                            IsCorrect = false,
                            QuestionId = 2,
                            Text = "GET ALL FROM tabulka;"
                        });
                });

            modelBuilder.Entity("dbs2webapp.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Question__3214EC07BE6F4E22");

                    b.ToTable("Question", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Co znamená SQL?"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Který příkaz získává všechna data z tabulky?"
                        });
                });

            modelBuilder.Entity("dbs2webapp.Models.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChapterId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxAttempts")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__Test__3214EC077FA06AA2");

                    b.HasIndex("ChapterId");

                    b.ToTable("Test", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChapterId = 1,
                            Description = "Ověření znalostí základních SQL příkazů.",
                            MaxAttempts = 3,
                            Title = "Test základů SQL"
                        },
                        new
                        {
                            Id = 2,
                            ChapterId = 2,
                            Description = "Test zaměřený na SELECT příkazy.",
                            MaxAttempts = 3,
                            Title = "Test SELECT"
                        });
                });

            modelBuilder.Entity("dbs2webapp.Models.TestInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Attempt")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Test_ins__3214EC07C1C5D6D4");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("Test_instance", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Attempt = 1,
                            StartedAt = new DateTime(2025, 3, 18, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            TestId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("dbs2webapp.Models.TestQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Test_Que__3214EC076A260717");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TestId");

                    b.ToTable("Test_Question", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QuestionId = 1,
                            TestId = 1
                        },
                        new
                        {
                            Id = 2,
                            QuestionId = 2,
                            TestId = 2
                        });
                });

            modelBuilder.Entity("dbs2webapp.Models.UserCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__User_Cou__3214EC07D1836DD5");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("User_Course", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("dbs2webapp.Models.AppUser", b =>
                {
                    b.HasOne("dbs2webapp.Models.AccountRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__AppUser__RoleId__3A81B327");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("dbs2webapp.Models.Assignment", b =>
                {
                    b.HasOne("dbs2webapp.Models.Chapter", "Chapter")
                        .WithMany("Assignments")
                        .HasForeignKey("ChapterId")
                        .IsRequired()
                        .HasConstraintName("FK__Assignmen__Chapt__5BE2A6F2");

                    b.HasOne("dbs2webapp.Models.AppUser", "Teacher")
                        .WithMany("Assignments")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK__Assignmen__UserI__5AEE82B9");

                    b.Navigation("Chapter");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("dbs2webapp.Models.AssignmentSubmission", b =>
                {
                    b.HasOne("dbs2webapp.Models.Assignment", "Assignment")
                        .WithMany("AssignmentSubmissions")
                        .HasForeignKey("AssignmentId")
                        .IsRequired()
                        .HasConstraintName("FK__Assignmen__Assig__5EBF139D");

                    b.HasOne("dbs2webapp.Models.AppUser", "User")
                        .WithMany("AssignmentSubmissions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Assignmen__UserI__5FB337D6");

                    b.Navigation("Assignment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dbs2webapp.Models.AssignmentUser", b =>
                {
                    b.HasOne("dbs2webapp.Models.Assignment", "Assignment")
                        .WithMany("AssignmentUsers")
                        .HasForeignKey("AssignmentId")
                        .IsRequired()
                        .HasConstraintName("FK_Assignment_User_Assignment");

                    b.HasOne("dbs2webapp.Models.AppUser", "User")
                        .WithMany("AssignmentUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Assignment_User");

                    b.Navigation("Assignment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dbs2webapp.Models.Chapter", b =>
                {
                    b.HasOne("dbs2webapp.Models.Course", "Course")
                        .WithMany("Chapters")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__Chapter__CourseI__45F365D3");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("dbs2webapp.Models.ChapterContent", b =>
                {
                    b.HasOne("dbs2webapp.Models.Chapter", "Chapter")
                        .WithMany("ChapterContents")
                        .HasForeignKey("ChapterId")
                        .IsRequired()
                        .HasConstraintName("FK__Chapter_c__Chapt__48CFD27E");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("dbs2webapp.Models.Course", b =>
                {
                    b.HasOne("dbs2webapp.Models.CourseCategory", "CourseCategory")
                        .WithMany("Courses")
                        .HasForeignKey("CourseCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__Course__Course_c__3F466844");

                    b.Navigation("CourseCategory");
                });

            modelBuilder.Entity("dbs2webapp.Models.Option", b =>
                {
                    b.HasOne("dbs2webapp.Models.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK__Option__Question__5812160E");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("dbs2webapp.Models.Test", b =>
                {
                    b.HasOne("dbs2webapp.Models.Chapter", "Chapter")
                        .WithMany("Tests")
                        .HasForeignKey("ChapterId")
                        .IsRequired()
                        .HasConstraintName("FK__Test__ChapterId__4BAC3F29");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("dbs2webapp.Models.TestInstance", b =>
                {
                    b.HasOne("dbs2webapp.Models.Test", "Test")
                        .WithMany("TestInstances")
                        .HasForeignKey("TestId")
                        .IsRequired()
                        .HasConstraintName("FK__Test_inst__TestI__4E88ABD4");

                    b.HasOne("dbs2webapp.Models.AppUser", "User")
                        .WithMany("TestInstances")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Test_inst__UserI__4F7CD00D");

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dbs2webapp.Models.TestQuestion", b =>
                {
                    b.HasOne("dbs2webapp.Models.Question", "Question")
                        .WithMany("TestQuestions")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK__Test_Ques__Quest__5441852A");

                    b.HasOne("dbs2webapp.Models.Test", "Test")
                        .WithMany("TestQuestions")
                        .HasForeignKey("TestId")
                        .IsRequired()
                        .HasConstraintName("FK__Test_Ques__TestI__5535A963");

                    b.Navigation("Question");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("dbs2webapp.Models.UserCourse", b =>
                {
                    b.HasOne("dbs2webapp.Models.Course", "Course")
                        .WithMany("UserCourses")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__User_Cour__Cours__4316F928");

                    b.HasOne("dbs2webapp.Models.AppUser", "User")
                        .WithMany("UserCourses")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__User_Cour__UserI__4222D4EF");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dbs2webapp.Models.AccountRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("dbs2webapp.Models.AppUser", b =>
                {
                    b.Navigation("AssignmentSubmissions");

                    b.Navigation("AssignmentUsers");

                    b.Navigation("Assignments");

                    b.Navigation("TestInstances");

                    b.Navigation("UserCourses");
                });

            modelBuilder.Entity("dbs2webapp.Models.Assignment", b =>
                {
                    b.Navigation("AssignmentSubmissions");

                    b.Navigation("AssignmentUsers");
                });

            modelBuilder.Entity("dbs2webapp.Models.Chapter", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("ChapterContents");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("dbs2webapp.Models.Course", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("UserCourses");
                });

            modelBuilder.Entity("dbs2webapp.Models.CourseCategory", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("dbs2webapp.Models.Question", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("TestQuestions");
                });

            modelBuilder.Entity("dbs2webapp.Models.Test", b =>
                {
                    b.Navigation("TestInstances");

                    b.Navigation("TestQuestions");
                });
#pragma warning restore 612, 618
        }
    }
}
